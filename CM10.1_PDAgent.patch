diff -rupN '--exclude=.svn' '--exclude=.git*' '--exclude=*.java~' '--exclude=*.mk~' '--exclude=*.orig~' '--exclude=*.txt' '--exclude=*.orig' '--exclude=*.rej' '--exclude=*.latest' '--exclude=*.txt~' '--exclude=*.xml~' '--exclude=*xml.orig~' '--exclude=*.xml.orig' '--exclude=*.patch~' '--exclude=*.patch' '--exclude=*.diff~' '--exclude=*.diff~' '--exclude=*.latest' '--exclude=*.latest~' /media/ROM-Speicher/CM10.1/packages/apps/PDroidAgent/AndroidManifest.xml pang/packages/apps/PDroidAgent/AndroidManifest.xml
--- /media/ROM-Speicher/CM10.1/packages/apps/PDroidAgent/AndroidManifest.xml	1970-01-01 05:30:00.000000000 +0530
+++ pang/packages/apps/PDroidAgent/AndroidManifest.xml	2013-02-28 01:01:33.680687737 +0545
@@ -0,0 +1,23 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+        package="com.privacy.pdroidagent"
+        coreApp="true"
+        android:sharedUserId="android.uid.system">
+
+    <uses-permission android:name="android.permission.FORCE_STOP_PACKAGES"/>
+
+    <permission android:label="@string/permlab_receive_kill_task_command" android:name="android.privacy.RECEIVE_TASK_KILL_COMMAND" android:protectionLevel="signature" android:permissionGroup="android.permission-group.PERSONAL_INFO" android:description="@string/permdesc_receive_kill_task_command" />
+    <uses-permission android:name="android.privacy.RECEIVE_TASK_KILL_COMMAND" />
+
+    <permission android:label="@string/permlab_receive_disable_apps" android:name="android.privacy.RECEIVE_DISABLE_ENABLE_APPLICATIONS" android:protectionLevel="signature" android:permissionGroup="android.permission-group.PERSONAL_INFO" android:description="@string/permdesc_receive_disable_apps" />
+    <uses-permission android:name="android.privacy.RECEIVE_DISABLE_ENABLE_APPLICATIONS" />
+    
+    <application android:label="@string/label"
+            android:taskAffinity="">
+	<receiver android:name=".PrivacyReceiver" android:enabled="true">
+            <intent-filter>
+                <action android:name="com.privacy.pdroid.KILL_TASKS" />
+                <action android:name="com.privacy.pdroid.DISABLE_ENABLE_APPLICATION" />
+            </intent-filter>
+        </receiver>	
+    </application>
+</manifest>
diff -rupN '--exclude=.svn' '--exclude=.git*' '--exclude=*.java~' '--exclude=*.mk~' '--exclude=*.orig~' '--exclude=*.txt' '--exclude=*.orig' '--exclude=*.rej' '--exclude=*.latest' '--exclude=*.txt~' '--exclude=*.xml~' '--exclude=*xml.orig~' '--exclude=*.xml.orig' '--exclude=*.patch~' '--exclude=*.patch' '--exclude=*.diff~' '--exclude=*.diff~' '--exclude=*.latest' '--exclude=*.latest~' /media/ROM-Speicher/CM10.1/packages/apps/PDroidAgent/Android.mk pang/packages/apps/PDroidAgent/Android.mk
--- /media/ROM-Speicher/CM10.1/packages/apps/PDroidAgent/Android.mk	1970-01-01 05:30:00.000000000 +0530
+++ pang/packages/apps/PDroidAgent/Android.mk	2013-02-28 01:01:33.680687737 +0545
@@ -0,0 +1,16 @@
+LOCAL_PATH:= $(call my-dir)
+include $(CLEAR_VARS)
+
+LOCAL_MODULE_TAGS := optional
+
+LOCAL_SRC_FILES := $(call all-java-files-under, src)
+
+LOCAL_PACKAGE_NAME := PDroidAgent
+LOCAL_CERTIFICATE := platform
+
+#LOCAL_PROGUARD_FLAG_FILES := proguard.flags
+
+include $(BUILD_PACKAGE)
+
+# Use the following include to make our test apk.
+include $(call all-makefiles-under,$(LOCAL_PATH))
diff -rupN '--exclude=.svn' '--exclude=.git*' '--exclude=*.java~' '--exclude=*.mk~' '--exclude=*.orig~' '--exclude=*.txt' '--exclude=*.orig' '--exclude=*.rej' '--exclude=*.latest' '--exclude=*.txt~' '--exclude=*.xml~' '--exclude=*xml.orig~' '--exclude=*.xml.orig' '--exclude=*.patch~' '--exclude=*.patch' '--exclude=*.diff~' '--exclude=*.diff~' '--exclude=*.latest' '--exclude=*.latest~' /media/ROM-Speicher/CM10.1/packages/apps/PDroidAgent/CleanSpec.mk pang/packages/apps/PDroidAgent/CleanSpec.mk
--- /media/ROM-Speicher/CM10.1/packages/apps/PDroidAgent/CleanSpec.mk	1970-01-01 05:30:00.000000000 +0530
+++ pang/packages/apps/PDroidAgent/CleanSpec.mk	2013-02-28 01:01:33.680687737 +0545
@@ -0,0 +1,49 @@
+# Copyright (C) 2007 The Android Open Source Project
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+# If you don't need to do a full clean build but would like to touch
+# a file or delete some intermediate files, add a clean step to the end
+# of the list.  These steps will only be run once, if they haven't been
+# run before.
+#
+# E.g.:
+#     $(call add-clean-step, touch -c external/sqlite/sqlite3.h)
+#     $(call add-clean-step, rm -rf $(PRODUCT_OUT)/obj/STATIC_LIBRARIES/libz_intermediates)
+#
+# Always use "touch -c" and "rm -f" or "rm -rf" to gracefully deal with
+# files that are missing or have been moved.
+#
+# Use $(PRODUCT_OUT) to get to the "out/target/product/blah/" directory.
+# Use $(OUT_DIR) to refer to the "out" directory.
+#
+# If you need to re-do something that's already mentioned, just copy
+# the command and add it to the bottom of the list.  E.g., if a change
+# that you made last week required touching a file and a change you
+# made today requires touching the same file, just copy the old
+# touch step and add it to the end of the list.
+#
+# ************************************************
+# NEWER CLEAN STEPS MUST BE AT THE END OF THE LIST
+# ************************************************
+
+# For example:
+#$(call add-clean-step, rm -rf $(OUT_DIR)/target/common/obj/APPS/AndroidTests_intermediates)
+#$(call add-clean-step, rm -rf $(OUT_DIR)/target/common/obj/JAVA_LIBRARIES/core_intermediates)
+#$(call add-clean-step, find $(OUT_DIR) -type f -name "IGTalkSession*" -print0 | xargs -0 rm -f)
+#$(call add-clean-step, rm -rf $(PRODUCT_OUT)/data/*)
+
+# ************************************************
+# NEWER CLEAN STEPS MUST BE AT THE END OF THE LIST
+# ************************************************
diff -rupN '--exclude=.svn' '--exclude=.git*' '--exclude=*.java~' '--exclude=*.mk~' '--exclude=*.orig~' '--exclude=*.txt' '--exclude=*.orig' '--exclude=*.rej' '--exclude=*.latest' '--exclude=*.txt~' '--exclude=*.xml~' '--exclude=*xml.orig~' '--exclude=*.xml.orig' '--exclude=*.patch~' '--exclude=*.patch' '--exclude=*.diff~' '--exclude=*.diff~' '--exclude=*.latest' '--exclude=*.latest~' /media/ROM-Speicher/CM10.1/packages/apps/PDroidAgent/README.md pang/packages/apps/PDroidAgent/README.md
--- /media/ROM-Speicher/CM10.1/packages/apps/PDroidAgent/README.md	1970-01-01 05:30:00.000000000 +0530
+++ pang/packages/apps/PDroidAgent/README.md	2013-02-28 01:02:23.299241635 +0545
@@ -0,0 +1,11 @@
+<p align="center">
+  <img src="http://www.privilege-car.de/xda/PDroid-banner.png" alt="PDroid2.0"/>
+</p>
+## PDroidAgent
+## What is it?
+It is an Addon-Applications which *unlocks* new features to PDroid2.0/OpenPDroid (in future the same framework).
+## Which features are currently supported?
+At this stage there isn't a *bunch* of features included to this Addon-Application. Following features are supported:
+
+* Task-Killing (for description please take a look [here](http://forum.xda-developers.com/showpost.php?p=37742535&postcount=623)
+* Disabling applications immediately after *installation*/*update*
\ Kein Zeilenumbruch am Dateiende.
diff -rupN '--exclude=.svn' '--exclude=.git*' '--exclude=*.java~' '--exclude=*.mk~' '--exclude=*.orig~' '--exclude=*.txt' '--exclude=*.orig' '--exclude=*.rej' '--exclude=*.latest' '--exclude=*.txt~' '--exclude=*.xml~' '--exclude=*xml.orig~' '--exclude=*.xml.orig' '--exclude=*.patch~' '--exclude=*.patch' '--exclude=*.diff~' '--exclude=*.diff~' '--exclude=*.latest' '--exclude=*.latest~' /media/ROM-Speicher/CM10.1/packages/apps/PDroidAgent/res/values/strings.xml pang/packages/apps/PDroidAgent/res/values/strings.xml
--- /media/ROM-Speicher/CM10.1/packages/apps/PDroidAgent/res/values/strings.xml	1970-01-01 05:30:00.000000000 +0530
+++ pang/packages/apps/PDroidAgent/res/values/strings.xml	2013-02-28 01:01:33.680687737 +0545
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+
+    <string name="label">PDroidAgent</string>
+    <!-- **** Privacy Permission descriptions **** -->
+    <string name="permlab_receive_kill_task_command">Receive the kill Task command</string>
+    <string name="permdesc_receive_kill_task_command">Allows an application to receive the kill task command. This prevents that other applications are available to receive it.</string>
+    
+    <string name="permlab_receive_disable_apps">Receive the disable or enable apps command</string>
+    <string name="permdesc_receive_disable_apps">Allows an application to receive the disable or enable apps command. This prevents that other applications are available to receive it.</string>
+     <!-- **** Privacy Permission descriptions **** -->
+
+</resources>
diff -rupN '--exclude=.svn' '--exclude=.git*' '--exclude=*.java~' '--exclude=*.mk~' '--exclude=*.orig~' '--exclude=*.txt' '--exclude=*.orig' '--exclude=*.rej' '--exclude=*.latest' '--exclude=*.txt~' '--exclude=*.xml~' '--exclude=*xml.orig~' '--exclude=*.xml.orig' '--exclude=*.patch~' '--exclude=*.patch' '--exclude=*.diff~' '--exclude=*.diff~' '--exclude=*.latest' '--exclude=*.latest~' /media/ROM-Speicher/CM10.1/packages/apps/PDroidAgent/src/com/privacy/pdroidagent/PrivacyReceiver.java pang/packages/apps/PDroidAgent/src/com/privacy/pdroidagent/PrivacyReceiver.java
--- /media/ROM-Speicher/CM10.1/packages/apps/PDroidAgent/src/com/privacy/pdroidagent/PrivacyReceiver.java	1970-01-01 05:30:00.000000000 +0530
+++ pang/packages/apps/PDroidAgent/src/com/privacy/pdroidagent/PrivacyReceiver.java	2013-02-28 01:01:33.680687737 +0545
@@ -0,0 +1,352 @@
+package com.privacy.pdroidagent;
+
+import android.app.ActivityManager;
+import android.content.BroadcastReceiver;
+import android.content.ComponentName;
+import android.content.Context;
+import android.content.Intent;
+import android.os.AsyncTask;
+import android.os.RemoteException;
+import android.content.pm.ActivityInfo;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.ComponentInfo;
+import android.content.pm.IPackageManager;
+import android.content.pm.PackageInfo;
+import android.content.pm.PackageManager;
+import android.content.pm.PackageManager.NameNotFoundException;
+import android.content.pm.ProviderInfo;
+import android.content.pm.ResolveInfo;
+import android.content.pm.ServiceInfo;
+import android.os.ServiceManager;
+import android.privacy.PrivacySettingsManager;
+import android.privacy.utilities.PrivacyConstants;
+import android.privacy.utilities.PrivacyDebugger;
+
+import java.lang.ref.WeakReference;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Random;
+
+/**
+ * Copyright (C) 2012-2013 Stefan Thiele
+ * This program is free software; you can redistribute it and/or modify it under
+ * the terms of the GNU General Public License as published by the Free Software
+ * Foundation; either version 3 of the License, or (at your option) any later version.
+ * This program is distributed in the hope that it will be useful, but WITHOUT ANY
+ * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
+ * PARTICULAR PURPOSE. See the GNU General Public License for more details.
+ * You should have received a copy of the GNU General Public License along with
+ * this program; if not, see <http://www.gnu.org/licenses>.
+ */
+public final class PrivacyReceiver extends BroadcastReceiver{
+
+	private static final String TAG = "PrivacyReceiver";
+	
+	
+	@Override
+	public void onReceive(Context context, Intent intent) {
+		android.os.Process.setGid(1000);
+		if(intent.getAction().equals(PrivacySettingsManager.ACTION_KILL_TASKS)){
+			
+			final int random = new Random().nextInt();
+			final long random1 = new Random().nextLong();
+			final int UID_INTENT = intent.getIntExtra(PrivacyConstants.TaskKiller.EXTRA_UID, random);
+			final long unique_id = intent.getLongExtra(PrivacyConstants.CallerRegistry.EXTRA_UNIQUE_DATA_ACCESS_ID, random1);
+			PrivacyDebugger.i(TAG,"got intent for killing packages. UID_INTENT: " + UID_INTENT);
+			if(UID_INTENT == random) {
+				PrivacyDebugger.e(TAG,"error while parsing UID -> return");
+				return;
+			}
+			if(unique_id == random1) {
+				PrivacyDebugger.e(TAG,"error while parsing Unique-UID -> return");
+				return;
+			}
+			
+			PrivacySettingsManager pSetMan = (PrivacySettingsManager) context.getSystemService("privacy");
+
+			long UID_CALLER;
+			try{
+				UID_CALLER = pSetMan.getLastCallerId(unique_id);
+			} catch (SecurityException e){
+				PrivacyDebugger.e(TAG,"Nice try...bye!");
+				return;
+			}
+
+			IPackageManager mPm = IPackageManager.Stub.asInterface(ServiceManager.getService("package"));
+			String[] expectedPackageName = null;
+
+			try {
+				expectedPackageName = mPm.getPackagesForUid(UID_INTENT);
+			} catch (RemoteException e) {
+				e.printStackTrace();
+				return;
+			}
+			
+			if(expectedPackageName == null || expectedPackageName.length == 0 || !expectedPackageName[0].equals("com.android.privacy.pdroid20")) { //add your manager here
+				PrivacyDebugger.e(TAG,"Nice try...bye!");
+				return;
+			}
+			
+			if(UID_INTENT != UID_CALLER){
+				PrivacyDebugger.e(TAG,"Nice try...bye!");
+				return;
+			}
+			
+			final String[] names = intent.getStringArrayExtra(PrivacyConstants.TaskKiller.EXTRA_PACKAGES);
+			if(names == null){
+				PrivacyDebugger.e(TAG,"No packages to kill -> return");
+				return;
+			}
+			ActivityManager am = (ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);
+			for(String app : names){
+				try{
+					am.forceStopPackage(app);
+				} catch (Exception e){
+					e.printStackTrace();
+					PrivacyDebugger.e(TAG,"Got error while trying to kill package: " + app);
+				}
+			}
+		} else if(intent.getAction().equals(PrivacySettingsManager.ACTION_DISABLE_ENABLE_APPLICATION)) {
+			
+			final int random = new Random().nextInt();
+			final long random1 = new Random().nextLong();
+			final int UID_INTENT = intent.getIntExtra(PrivacyConstants.AppDisabler.EXTRA_UID, random);
+			final long unique_id = intent.getLongExtra(PrivacyConstants.CallerRegistry.EXTRA_UNIQUE_DATA_ACCESS_ID, random1);
+			PrivacyDebugger.i(TAG,"got intent for disabling/enabling application. UID_INTENT: " + UID_INTENT);
+			if(UID_INTENT == random) {
+				PrivacyDebugger.e(TAG,"error while parsing UID -> return");
+				return;
+			}
+			if(unique_id == random1) {
+				PrivacyDebugger.e(TAG,"error while parsing Unique-UID -> return");
+				return;
+			}
+			
+			PrivacySettingsManager pSetMan = (PrivacySettingsManager) context.getSystemService("privacy");
+
+			long UID_CALLER;
+			try{
+				UID_CALLER = pSetMan.getLastCallerId(unique_id);
+			} catch (SecurityException e){
+				PrivacyDebugger.e(TAG,"Nice try...bye!");
+				return;
+			}
+
+			IPackageManager mPm = IPackageManager.Stub.asInterface(ServiceManager.getService("package"));
+			String[] expectedPackageName = null;
+
+			try {
+				expectedPackageName = mPm.getPackagesForUid(UID_INTENT);
+			} catch (RemoteException e) {
+				e.printStackTrace();
+				return;
+			}
+			
+			if(expectedPackageName == null || expectedPackageName.length == 0 || !expectedPackageName[0].equals("com.android.privacy.pdroid20")) { //add your manager here
+				PrivacyDebugger.e(TAG,"Nice try...bye!");
+				return;
+			}
+			
+			if(UID_INTENT != UID_CALLER){
+				PrivacyDebugger.e(TAG,"Nice try...bye!");
+				return;
+			}
+			
+			final String packageName = intent.getStringExtra(PrivacyConstants.AppDisabler.EXTRA_PACKAGE);
+			
+			if(packageName == null){
+				PrivacyDebugger.e(TAG,"No package to disable -> return");
+				return;
+			}
+			
+			final boolean disable = intent.getBooleanExtra(PrivacyConstants.AppDisabler.EXTRA_DISABLE_OR_ENABLE, false);
+			
+			//if disable == true, disable, otherwise enable the application
+			if(isThisASystemPackageOrLauncher(packageName, context)) {
+				// Try to prevent the user from bricking their phone
+	            // by not allowing disabling of apps signed with the
+	            // system cert and any launcher app in the system
+				PrivacyDebugger.e(TAG,"OnReceive - can't disable core apps -> return");
+				return;
+			}
+			
+			if(disable) {
+				PrivacyDebugger.i(TAG, "onReceive - now going to disable application: " + packageName);
+				new DisableChanger(context.getPackageManager(), packageName, PackageManager.COMPONENT_ENABLED_STATE_DISABLED, context).execute((Object)null);
+			} else {
+				PrivacyDebugger.i(TAG, "onReceive - now going to enable application: " + packageName);
+				new DisableChanger(context.getPackageManager(), packageName, PackageManager.COMPONENT_ENABLED_STATE_DEFAULT, context).execute((Object)null);
+			}
+			
+		} else {
+			PrivacyDebugger.w(TAG,"received Intent, but not our");
+		}
+		
+	}
+	
+	/**
+	 * helper class for disabling/enabling applications
+	 * @author CollegeDev
+	 */
+	private static class DisableChanger extends AsyncTask<Object, Object, Object> {
+        final PackageManager mPm;
+        final String packageName;
+        final int mState;
+        final Context context;
+
+        DisableChanger(PackageManager packageManager, String packageName, int state, Context context) {
+            this.mPm = packageManager;
+            this.packageName = packageName;
+            this.mState = state;
+            this.context = context;
+        }
+
+        @Override
+        protected Object doInBackground(Object... params) {
+        	//first trying to disable components
+        	List<ComponentName> components = getAllComponents(packageName, context);
+        	for(ComponentName component : components) {
+        		try {
+        			PrivacyDebugger.i(TAG,"DisableChanger - component: " + component.getClassName() + " in progress");
+        			mPm.setComponentEnabledSetting(component, mState, PackageManager.DONT_KILL_APP);
+        		} catch(Exception e) {
+        		    //nothing here   
+        		}
+        	}
+        	//now going to disable/enable all, just to be sure!
+        	PrivacyDebugger.i(TAG, "DisableChanger - now make sure and call setApplicationEnabledSetting");
+            mPm.setApplicationEnabledSetting(packageName, mState, 0);
+            return null;
+        }
+    }
+	
+	/**
+	 * 
+	 * @param packageName
+	 * @param context
+	 * @return
+	 */
+	private boolean isThisASystemPackageOrLauncher(String packageName, Context context) {
+        try {
+        	boolean output = false;
+        	PackageManager mPm = context.getPackageManager();
+        	Intent intent = new Intent(Intent.ACTION_MAIN);
+            intent.addCategory(Intent.CATEGORY_HOME);
+            intent.setPackage(packageName);
+            List<ResolveInfo> homes = mPm.queryIntentActivities(intent, 0);
+            PackageInfo sys = mPm.getPackageInfo("android", PackageManager.GET_SIGNATURES);
+            PackageInfo currentPackage = mPm.getPackageInfo(packageName, PackageManager.GET_SIGNATURES);
+            if(currentPackage != null && currentPackage.signatures != null && sys.signatures[0].equals(currentPackage.signatures[0]))
+            	output = true;
+            if((homes != null && homes.size() > 0))
+            	output = true;
+            PrivacyDebugger.i(TAG,"isThisASystemPackageOrLauncher - return value: " + output);
+            return output;
+            
+        } catch (PackageManager.NameNotFoundException e) {
+            return false;
+        }
+    }
+	
+	private static List<ComponentName> getAllComponents(String packageName, Context context) {
+		List<ComponentName> output = new ArrayList<ComponentName>();
+		PackageManager pm = context.getPackageManager();
+		try {
+			PackageInfo pInfo = pm.getPackageInfo(packageName, 	PackageManager.GET_ACTIVITIES | 
+																PackageManager.GET_RECEIVERS | 
+																PackageManager.GET_PROVIDERS | 
+																PackageManager.GET_SERVICES );
+//			ActivityInfo[] aInfo = pInfo.activities;
+//			if(aInfo != null) {
+//				PrivacyDebugger.i(TAG, "getAllComponents - now adding activity components");
+//				for(ActivityInfo info : aInfo) {
+//					PrivacyDebugger.i(TAG, "getAllComponents - component name: " + info.name);
+//					if(info.name.contains(packageName)) {
+//						output.add(new ComponentName(packageName, info.name));
+//						PrivacyDebugger.i(TAG,"getAllComponents - (1) added component name: " + info.name);
+//					} else if(info.name.startsWith(".") && !info.name.contains(packageName)) {
+//						output.add(new ComponentName(packageName, packageName + info.name));
+//						PrivacyDebugger.i(TAG,"getAllComponents - (2) added component name: " + packageName + info.name);
+//					} else if(!info.name.startsWith(".") && !info.name.contains(packageName)) {
+//						output.add(new ComponentName(packageName, info.name));
+//						PrivacyDebugger.i(TAG,"getAllComponents - (3) added component name: " + info.name);
+//					} else {
+//						PrivacyDebugger.i(TAG, "getAllComponents - can't detect pattern. Name: " + info.name);
+//					}
+//				}
+//			} else {
+//			    PrivacyDebugger.w(TAG,"getAllComponents - can't find any activity component for package: " + packageName);
+//			}
+			ActivityInfo[] rInfo = pInfo.receivers;
+			if(rInfo != null) {
+				PrivacyDebugger.i(TAG,"getAllComponents - now adding receiver components");
+				for(ActivityInfo info : rInfo) {
+					PrivacyDebugger.i(TAG, "getAllComponents - component name: " + info.name);
+					if(info.name.contains(packageName)) {
+						output.add(new ComponentName(packageName, info.name));
+						PrivacyDebugger.i(TAG,"getAllComponents - (1) added component name: " + info.name);
+					} else if(info.name.startsWith(".") && !info.name.contains(packageName)) {
+						output.add(new ComponentName(packageName, packageName + info.name));
+						PrivacyDebugger.i(TAG,"getAllComponents - (2) added component name: " + packageName + info.name);
+					} else if(!info.name.startsWith(".") && !info.name.contains(packageName)) {
+						output.add(new ComponentName(packageName, info.name));
+						PrivacyDebugger.i(TAG,"getAllComponents - (3) added component name: " + info.name);
+					} else {
+						PrivacyDebugger.i(TAG, "getAllComponents - can't detect pattern. Name: " + info.name);
+					}
+				}
+			} else {
+				PrivacyDebugger.w(TAG,"getAllComponents - can't find any receiver component for package: " + packageName);
+			}
+			ProviderInfo[] mpInfo = pInfo.providers;
+			if(mpInfo != null) {
+				PrivacyDebugger.i(TAG,"getAllComponents - now adding provider components");
+				for(ProviderInfo info : mpInfo) {
+					PrivacyDebugger.i(TAG, "getAllComponents - component name: " + info.name);
+					if(info.name.contains(packageName)) {
+						output.add(new ComponentName(packageName, info.name));
+						PrivacyDebugger.i(TAG,"getAllComponents - (1) added component name: " + info.name);
+					} else if(info.name.startsWith(".") && !info.name.contains(packageName)) {
+						output.add(new ComponentName(packageName, packageName + info.name));
+						PrivacyDebugger.i(TAG,"getAllComponents - (2) added component name: " + packageName + info.name);
+					} else if(!info.name.startsWith(".") && !info.name.contains(packageName)) {
+						output.add(new ComponentName(packageName, info.name));
+						PrivacyDebugger.i(TAG,"getAllComponents - (3) added component name: " + info.name);
+					} else {
+						PrivacyDebugger.i(TAG, "getAllComponents - can't detect pattern. Name: " + info.name);
+					}
+				}
+			} else {
+				PrivacyDebugger.w(TAG,"getAllComponents - can't find any provider component for package: " + packageName);
+			}
+			ServiceInfo[] sInfo = pInfo.services;
+			if(sInfo != null) {
+				PrivacyDebugger.i(TAG,"getAllComponents - now adding service components");
+				for(ServiceInfo info : sInfo) {
+					PrivacyDebugger.i(TAG, "getAllComponents - component name: " + info.name);
+					if(info.name.contains(packageName)) {
+						output.add(new ComponentName(packageName, info.name));
+						PrivacyDebugger.i(TAG,"getAllComponents - (1) added component name: " + info.name);
+					} else if(info.name.startsWith(".") && !info.name.contains(packageName)) {
+						output.add(new ComponentName(packageName, packageName + info.name));
+						PrivacyDebugger.i(TAG,"getAllComponents - (2) added component name: " + packageName + info.name);
+					} else if(!info.name.startsWith(".") && !info.name.contains(packageName)) {
+						output.add(new ComponentName(packageName, info.name));
+						PrivacyDebugger.i(TAG,"getAllComponents - (3) added component name: " + info.name);
+					} else {
+						PrivacyDebugger.i(TAG, "getAllComponents - can't detect pattern. Name: " + info.name);
+					}
+				}
+			} else {
+				PrivacyDebugger.w(TAG,"getAllComponents - can't find any service component for package: " + packageName);
+			}
+			PrivacyDebugger.i(TAG, "getAllComponents - size of list before returning: " + output.size());
+			
+		} catch (NameNotFoundException e) {
+			PrivacyDebugger.e(TAG, "getAllComponents - name of app not found", e);
+		} catch (Exception e) {
+			// nothing here
+		}
+		return output;
+	}
+} 
